#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""======================================================================"""
"""IDE used: Spyder
   Python 3.6.4 on Anaconda3"""
#============================================================================
"""
Created on Sat Mar 17 14:56:11 2018

Due Date: Friday Mar 23 23:59 2018

@author: Alem Haddush Fitwi
Email:afitwi1@binghamton.edu
Network Computer Security - EECE580F
Department of Electrical & Computer Engineering
Watson Graduate School of Engineering & Applied Science
The State University of New York @ Binghamton
"""
#============================================================================
"""
Project 2: Terse Project Description
Write a python program that does the following
1) Read in an input file named "dnslog.txt" generated by dns2proxy.py code
2) Parse DNS logs and Create a profile of DNS Intrusion Detection System
"""
#============================================================================
"""
Step_0: Laconic Description of the solution Program Organization
It comprises three classes, namely
  1) class InputProcessing: handles file reading, extracting lines & parsing
  2) class StatisticsProcessing: handles dns info statistics  
  3) Class Testing: handles the calling and testing of all other classes
~~~~ For visited pages, count the number of unique DNS requests
~~~~ For visited pages, print out the unique DNS names observed.
~~~~ For visited pages, print out the time the first requested webpage was 
     visited
"""
#============================================================================
#----------------------------------------------------------------------------
"""
Step_1: Importing Required Packages or modules:
~importing re for string regular expressions handling
~importing datetime for year, month, day,and time handling
~import time for timing
"""
#----------------------------------------------------------------------------
import re
import datetime
import time    
#============================================================================
#----------------------------------------------------------------------------
"""
Step_2: Constructing an Input processing Class      
"""        
#----------------------------------------------------------------------------    
class InputProcessing:
    """
        Main Functions:
            1) Reading the logfile.txt generated by dns2proxy.py
            2) Reading the lines from the logfile
            3) Parse the lines and return the required information
    """
    #-------------------------------------------------------------------------
    def extractLinesFromLogFile(self,file_path):
        """This function reads the logfile and extracts the lines 
           Input@rgument: file_path
           Output:lines_list
        """
        self.file_path=file_path
        f_name = open(self.file_path, 'r') 
        lines_list=f_name.readlines()
        f_name.close()
        return lines_list
    
    #-------------------------------------------------------------------------
    def parselinesOfLogfile(self,lines_list):
        """This function extracts required data from logfile by removing
           redundant information
           Input@rgument: lines_list
           Output:info_list
        """
        info_list=[]
        self.lines_list=lines_list
        for line_buffer in self.lines_list:            
            line_buffer=line_buffer.replace("Client IP:" , "")
            line_buffer=line_buffer.replace("request is" , "")
            line_buffer=line_buffer.replace("\n" , " ")
            info_list.append(line_buffer.split())
        return info_list    
#============================================================================
#----------------------------------------------------------------------------
"""
Step_3: Constructing a logfile statistics processing Class      
"""   
#----------------------------------------------------------------------------
class StatisticsProcessing:
    """
       Main Functions:
            1) Reading the info_list generated by class InputProcessing
            2) Compute statistics of info_list 
            3) Write the processed info_out to memory with a filename    
    """
    def processInfoList(self, info_list): 
        """This function computes statistics of the info_list. The given time 
           interval between webpage visits is used to split the requests into
           their respective groups. 60sec is the inter-visit interval.
           Input@rgument: info_list
           Output:info_out
        """
        self.info_list=info_list
        site_visited=[]
        info_out=[]        
        t_old=0;        
        s_old=""        
        o_visit=""
        for info_buf in self.info_list:
            #print(info_buf[3])
            info_buf[3]=re.sub('\.$', '', info_buf[3])
            #print(info_buf[1][:-4])
            t_cur = datetime.datetime.strptime(info_buf[1][:-4], "%H:%M:%S")
            #print(t_cur)
            #Time interval computation and comparison with earlier sites
            if(len(site_visited)!=0):
                interv=("%f\n" %((t_cur-t_old).total_seconds()))                
                if((float(interv) >= 60.0) or 
                   (s_old==info_buf[3] and float(interv) >= 40.0) or 
                   (s_old!=info_buf[3] and float(interv) >= 15.0)):
                    info_out.append(site_visited)
                    o_visit=site_visited[0][2]
                    site_visited=[]
            if((s_old==info_buf[3] or o_visit==info_buf[3][4:]) and 
               (len(site_visited)==0)):                
                continue
            if (info_buf[3] not in site_visited):
                if(len(site_visited)!=0):
                    site_visited.append(info_buf[3])
                else:
                    visited_site=[info_buf[0],info_buf[1],info_buf[3]]
                    site_visited.append(visited_site)            
            t_old=t_cur
            s_old=info_buf[3]        	
        info_out.append(site_visited)
        #print(info_out)
        return info_out
    #-------------------------------------------------------------------------
    def writeOutput(self,info_out,filename):
        """This function writes statistics of the info_out           
           Input@rgument: info_out,filename
           Output:writes the sites in info_out with all required info
        """
        self.info_out=info_out
        self.filename=filename
        file_buf = open(self.filename, "w") 
        for dns_ls in self.info_out:
            i=0
            j=1
            for site in dns_ls:                
                if(i==0):                     
                    file_buf.write("%s:%s Time:%s %s\n" %(
                            site[2],len(dns_ls)-1,site[0],site[1]))                    
                    i+=1
                    continue                
                file_buf.write("%d.%s\n" %(j,site))  
                j+=1
            file_buf.write("\n")
        file_buf.close() 
#============================================================================
#----------------------------------------------------------------------------
"""
Step_4: Testing Class """        
#---------------------------------------------------------------------------- 
class Testing:
    """This class calls all other classes, execute them, prints out all
       desired outputs, and saves statistics as report_with_blocking.txt.
    """
    start = time.time()    
    print("**************************************************") 
    print("*----------Progrom execution commences here------*") 
    # Instantiating Class InputProcessing
    class_input_object_1=InputProcessing() 
    class_input_object_2=InputProcessing()
    #------------------------------------------------------------------------
    # Instantiating Class StatisticsProcessing
    class_statistics_object_1=StatisticsProcessing()
    class_statistics_object_2=StatisticsProcessing()
    #------------------------------------------------------------------------
    #Assigning the input file, the name of the report, and calling functions
    file_path="dnslog_with_blocking.txt"
    name_report="report_with_blocking.txt"
    line_list=class_input_object_1.extractLinesFromLogFile(file_path)
    print("*------------------------------------------------*")
    print("*1. Pulling out DNS information from '%s'*" %(file_path))     
    info_list=class_input_object_2.parselinesOfLogfile(line_list)
    info_out=class_statistics_object_1.processInfoList(info_list)
    class_statistics_object_2.writeOutput(info_out,name_report)     
    print("*2. Writing DNS statistics to '%s'." %(name_report)+"      *") 
    end = time.time()
    diff=(end - start)*1000  #in miliseconds
    print("*------------------------------------------------*")
    print("*----------Progrom ended executing!--------------*") 
    print("*----The total execution time is %f" %(diff)+"ms ----*") 
    print("**************************************************")     
#============================================================================
"""End of Program! 'With patience we can dissect an ant & reach its heart!'"""
#----------------------------------------------------------------------------
