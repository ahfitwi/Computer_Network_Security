#!/usr/bin/env python2
# -*- coding: utf-8 -*-   
"""======================================================================"""
"""IDE used: Spyder
   Python 2.7.14 on Anaconda2"""
#============================================================================
"""
Created on Sat Apr 21 14:24:30 2018

Due Date: Sunday April 29 23:59 2018

@author: Alem Haddush Fitwi
Email:afitwi1@binghamton.edu
Network Computer Security - EECE580F
Department of Electrical & Computer Engineering
Watson Graduate School of Engineering & Applied Science
The State University of New York @ Binghamton
"""
#============================================================================
"""
Project 3: Network Scan Detection
Terse Project Description
Write a python program that does the following
1) Capture network traffics on the monitoring linux machine using tcpdum
      tcpdum -i any -Q in> tcpdump_no_scan_xx.log (xx=-sS, -sV, etc)
2) Analyze traffics to Detect if there exists any scanning activity on the ntk
"""
#============================================================================
#----------------------------------------------------------------------------
"""
Step_1: Importing Required Packages or modules:
"""
#----------------------------------------------------------------------------
import glob, os
import datetime
#============================================================================
#----------------------------------------------------------------------------
"""
Step_2: Constructing an InputAnalyzing Class 
"""        
#----------------------------------------------------------------------------
class InputAnalyzing:
    """
        Main Functions:
            1) Creating a list of the names of scanned logs in ./ 
            2) Reading the tcpdump.log files generated by tcpdump command  
            3) Analyzing the lines of strings & saving them as array lists                   
    """
    #-------------------------------------------------------------------------
    def searchLogsDir(self,re_ext):
        """It searches all tcpdump*.log files in current Directory
           Input@rgument: re_ext
           Output:logs
        """       
        os.chdir("./")#set current path as the default dir
        logs=[]
        self.re_ext=re_ext #to identify .log filenames in current dir
        for log_name in glob.glob( self.re_ext):
            logs.append(log_name)
        return logs     
    #-------------------------------------------------------------------------
    def analyzePackets(self,file_name):
        """It takes the list of filenames as input and classify them into ARP
           & IP traffics using ARP & IP as keywords. 
           It reads the tcpdump_xx.log files & extracts the lines into arrays.
           Input@rgument: file_path
           Output:listed_data
        """
        o=PacketScansAnalyzer();
        listed_data=[] #stores analyzed packets
        classified_lines=[] # stores the classified lines	      
        self.file_name=file_name
        f_name = open( self.file_name, 'r') 
        lines_list=f_name.readlines()
        f_name.close()           
        for buf_l in lines_list:
            """Splits each line of string as ARP or IP packet"""            			
            buf_l= buf_l.replace("\n" , "") #Remove null line		    
            if(len( buf_l.split())!=0): 
                if ("ARP" in  buf_l):
                    classified_lines.append( buf_l.split(','))#ARP Traffic
                    continue                
                if (("IP" in  buf_l) and ("IP6" not in  buf_l 
                                        ) and (">" in  buf_l)): #IP Traffic
                    classified_lines.append( buf_l.split('>'))
                    continue         
        for buf_l2 in classified_lines:
            if ("ARP" in buf_l2[0]):
                listed_data.append(o.analyzeBroadcast(buf_l2))#Classify As ARP
                continue
            if ("IP" in buf_l2[0]):
                listed_data.append(o.analyzeIPPacket(buf_l2)) #Classify As IP
                continue
        return listed_data
#============================================================================
#----------------------------------------------------------------------------
"""
Step_3: Constructing analyzeTrafficScans Class          
"""        
#----------------------------------------------------------------------------   
class PacketScansAnalyzer:
    """
        Main Functions:
            1) It reads the classified ARP and IP logs from previous class
            2) It extracts the required data from ARP and IP logs  
            3) It extracts useful data from the classified ARP & IP logs 
            4) Then, it detects network scans if there were any  
    """
    #-------------------------------------------------------------------------
    def analyzeTrafficScans(self,listed_data): 
        """It extracts useful info from the ARP & IP logs
           It detects if there are any network scanning activities
           Input@rgument: listed_data
           Output: detectedScans
        """   	
        self.listed_data=listed_data  
        useful_Info=[]  
        start_time=0; 
        detectedScans=[]
        for info in  self.listed_data:#Extract useful info from ARP Traffics
            if("ARP"==info[1]):
                if("Request"!=info[2] or "Broadcast"!=info[5]):
                    continue
                traffics=[] 
                traffics.append(info[1])#ARP Traffics
                traffics.append(info[0][:-7])#Start Time
                traffics.append(info[4])#Source
                traffics.append(info[3])#Destination
                traffics.append(info[5])#Broadcast	
            else:
                if("IP"!=info[1]):#Analyze IP traffics
                    continue	
                if(("netbios-ns"==info[3]) or 
                    ("domain"==info[3]) or
                    ("bootpc"==info[3]) or
                    ("netbios-ns"==info[5]) or 
                    ("domain"==info[5]) or
                    ("bootpc"==info[5])):
                    continue #Check Port otherwise skip to next
                if("ICMP" in info[6].split(",")[0]): #Handle ICMP Traffics
                    continue	
                #Analyzing the traffic scans by looking for flags
                if("Flags [S]"!=info[6].split(",")[0] and # -F, -sT, -O
                   "Flags [F]"!=info[6].split(",")[0] and # -sF, -sS
                   "Flags [none]"!=info[6].split(",")[0] and # -sN
                   "Flags [FPU]"!=info[6].split(",")[0] and  # -sX
                   "UDP"!=info[6].split(",")[0] and # -sU
                   "ip-proto"!=info[6][0:8]): # -sO
                    continue
                #Analyze the IP traffics
                currtime = datetime.datetime.strptime(info[0][:-7],"%H:%M:%S")
                flowpath=info[2]+">"+info[4]
                if("ip-proto"==info[6].split()[0][0:8]):
                    Traffictype="IP Protocol" #Add IP protocol
                    ports=info[6].split()[0][9:]
                else:
                    Traffictype="Port"                    
                    ports=info[5]#Add scaned port number                
                traffics=[]##Reset list 
                portScans=[]
                isTraffic=0 #used to check whether a traffic exists               
                for tmp_flow in useful_Info:
                    if(flowpath in tmp_flow):#check if scan exists						
                        traffics=tmp_flow
                        start_time=datetime.datetime.strptime(traffics[4],"%H:%M:%S")
                        #compare times
                        diff=("%f\n" %((currtime-start_time).total_seconds()))
                        if(float(diff) <= 10.0):	
                            isTraffic=1 #Flag if flow exists
                            break
                if(isTraffic==1):#If there exists any traffic
                    portScans=traffics[3]#get the scan port
                    if(ports not in portScans):#does port exists in list?
                        portScans.append(ports)
                    traffics[4]=info[0][:-7]#scan time history
                    continue #otherwise skip
                traffics=[]
                traffics.append(info[1])#Add scan activity start time
                traffics.append(info[0][:-7])#Add scan start time
                traffics.append(flowpath)
                portScans.append(ports)
                traffics.append(portScans)
                traffics.append(info[0][:-7])#Add current time
                traffics.append(Traffictype)
            if(0!=len(traffics)):
                useful_Info.append(traffics)         
        for temp in  useful_Info:
            if("ARP"==temp[0]):#Add broadcast
                scandTraffics=[] 
                scandTraffics.append(temp[0])#ARP Traffics
                scandTraffics.append(temp[1])#Scan time 
                scandTraffics.append(temp[2]) #Add scan src & Dest 
                scandTraffics.append(temp[3])#Last Scanning time 
                scandTraffics.append(temp[4])#Port type
            else: #Add IP Traffics
                portScans=temp[3]# Check scanned port range
                scandTraffics=[]
                if(len(portScans)>10): #check port threshold
                    scandTraffics.append(temp[0])#TCP Traffics
                    scandTraffics.append(temp[1])#Scanning time
                    scandTraffics.append(temp[2])#Add scan path
                    scandTraffics.append(temp[4])#Ending Scan Time
                    scandTraffics.append(len(portScans))#Add ports
                    scandTraffics.append(temp[5])#port type
            if(0!=len(scandTraffics)):
                detectedScans.append(scandTraffics)
        return detectedScans          
    #-------------------------------------------------------------------------
    def analyzeBroadcast(self,listed_data):
        """It parse the ARP log into array lists
           Input@rgument: listed_data
           Output:parsed_ARP
        """
        self.listed_data=listed_data
        parsed_ARP=[] #stores output        
        temp_ARP= self.listed_data[0].split()
        parsed_ARP.append(temp_ARP[0]) #Time
        parsed_ARP.append(temp_ARP[1]) #Type
        temp_ARP= self.listed_data[1].split()
        parsed_ARP.append(temp_ARP[0]) #Request/Reply
        if("Request"==temp_ARP[0]):#hHndles request
            parsed_ARP.append(temp_ARP[2]) #IP            
            if("Broadcast"==temp_ARP[3][1:-1]): #Classify ARP Traffics
                parsed_ARP.append(temp_ARP[5])
                parsed_ARP.append("Broadcast")#Add Broadcast ARP -sn
            else:
                parsed_ARP.append(temp_ARP[4])
                parsed_ARP.append("Normal")#Add Normal ARP
        if("Reply"==temp_ARP[0]):#Handles reply
            parsed_ARP.append(temp_ARP[1])#IP
            parsed_ARP.append(temp_ARP[3])#MAC
        temp_ARP=listed_data[2].split()
        ARP_data=""
        j=0
        while(j<len(temp_ARP)):
            ARP_data=ARP_data+temp_ARP[j]+" "
            j+=1
            parsed_ARP.append(ARP_data[:-1])
        return parsed_ARP
    
    #-------------------------------------------------------------------------
    def analyzeIPPacket(self,listed_data):
        """It parse the IP log into array lists
           Input@rgument: listed_data
           Output:analyzedPacket
        """   	
        self.listed_data=listed_data
        analyzedPacket=[] #stores output        
        temp_IP= self.listed_data[0].split()
        analyzedPacket.append(temp_IP[0]) #Time
        analyzedPacket.append(temp_IP[1]) #Type
        buf=temp_IP[2].split(".") #Source IP
        src_IP=buf[0]+"."+buf[1]+"."+buf[2]+"."+buf[3]
        analyzedPacket.append(src_IP)
        if(len(buf)>4):
            src_Port=buf[4] #Source Ports
        else:
            src_Port=""
        analyzedPacket.append(src_Port)
        temp_IP= self.listed_data[1].split(":")
        buf=temp_IP[0].split(".")
        des_IP=buf[0]+"."+buf[1]+"."+buf[2]+"."+buf[3] #destination IP
        analyzedPacket.append(des_IP[1:])
        if(len(buf)>4):
            	des_Port=buf[4]
        else:
            des_Port=""
        analyzedPacket.append(des_Port)	#destination Port
        temp_IP= self.listed_data[1].split()        
        IP_data=""
        j=1
        while(j<len(temp_IP)):
            IP_data=IP_data+temp_IP[j]+" "
            j+=1
        analyzedPacket.append(IP_data[:-1])
        return analyzedPacket    
#============================================================================
#----------------------------------------------------------------------------
"""
Step_4: Constructing ScanDetectionOutput Class          
"""        
#----------------------------------------------------------------------------   
class ScanDetectionOutput:
    """
        Exporting the report of the results of detection                                  
    """   
    #-------------------------------------------------------------------------
    def writeReport(self,detectedScans,filename): 
        """It generates a report of the logs and exports it to the current Dir
           Input@rgument: filename, and detectedScans
           Output:exports the report.
        """
        self.detectedScans=detectedScans
        self.filename=filename
        reminder="NB:for every scan, ARP & IP traffics are considered"
        writer=open( self.filename, "w") 
        end="**************************End of File*********************************"
        marker="======================================================================"
        writer.write("******** %s! ********\n"%(reminder))
        writer.write("%s\n"%(marker))
        l=1
        for scans in  self.detectedScans:           
            print("\n%d.%s-->" %(l,scans[0]))
            writer.write("%d.%s-->\n" %(l,scans[0]))
            for scan in scans[1]:#print out detected scans
                if("IP"==scan[0]):
                    print("\tScanned from %s at %s" %(scan[2].split('>')[0],scan[3]))
                    writer.write("\tScanned from %s at %s\n"%(scan[2].split('>')[0],scan[3]))
                else:
                    print("\tScanned from %s at %s" %(scan[2],scan[1]))
                    writer.write("\tScanned from %s at %s\n"%(scan[2],scan[1]))               
                writer.write("\n")
            l+=1
        writer.write("%s\n"%(marker))
        writer.write("%s\n"%(end))
        writer.close()     
#============================================================================
#----------------------------------------------------------------------------
"""
Step_5: Constructing Test Class         
"""        
##----------------------------------------------------------------------------   
class Test:
    """This class calls all other classes, execute them, exports and saves 
       the detected scans as report.txt.
    """
    #-------------------------------------------------------------------------
    #Class instantiating
    input_1=InputAnalyzing() 
    input_2=InputAnalyzing()          
    Parsing=PacketScansAnalyzer()    
    write=ScanDetectionOutput()  
    #-------------------------------------------------------------------------
    #Defining some vars
    report_name="report.txt"        
    detectedTraffics=[]  
    logs=[] #stores all scanned logs, fetched from current Dir
    #-------------------------------------------------------------------------
    #Processing the set of logs accessed from current Dir
    re_ext="*.log" #kinda RE for handling logs by their extension names	
    logs=input_1.searchLogsDir(re_ext) 
    for file_name in logs:	#Analyze each log
        final_buf=[]        
        print("Pulling out Network traffics from '%s'." %(file_name))
        listed_data=input_2.analyzePackets(file_name)
        detectedScans=Parsing.analyzeTrafficScans(listed_data)        
        final_buf.append(file_name)
        final_buf.append(detectedScans)
        detectedTraffics.append(final_buf)   
    print("Saving detected network scans to '%s'." %(report_name))
    write.writeReport(detectedTraffics,report_name)
#============================================================================
"""End of Program! 'With patience we can dissect an ant & reach its heart!'"""
#---------------------------------------------------------------------------- 
"""----------------------------------------------------------------------------
References:
************** 
    [1] Dr. M. O., Faruque Sarker, "Python Network Programming Coockbook"
    [2] Udemy courses: Network Programming I, II, and III
----------------------------------------------------------------------------"""
